//  If you're getting patients remotely, uncomment this:
//var client = require('ewdliteclient');

var getOptions = function() {
  return {
      hostname: 'localhost',
      port: 8081,
      agent: false,
      headers: {
        Authorization: 'thisisrob'
      }
  };
};

var http = require('http');

var getVistAData = function(patientId, ewd) {
  var options = getOptions();
  options.path = '/george/fhir/patient/@' + patientId + '/observation';

  var req = http.get(options, function(response) {
    console.log(response.statusCode);
    var data = '';
    response.on('data', function(chunk) {
      data += chunk;
    });
    response.on('end', function() {
      if (response.statusCode === 400) {
      }
      else {
        var observations = JSON.parse(data);
        console.log(JSON.stringify(observations, null, 2));
        ewd.sendWebSocketMsg({
          type: 'vistAData',
          observations: observations
        });
      }
    });
  });
};

var getPatientData = function(patientId, ewd) {
  var options = getOptions();
  options.path = '/ec2/fhir/patient/@' + patientId + '/observation';

  var req = http.get(options, function(response) {
    console.log(response.statusCode);
    var data = '';
    response.on('data', function(chunk) {
      data += chunk;
    });
    response.on('end', function() {
      if (response.statusCode === 400) {
      }
      else {
        var observations = JSON.parse(data);
        console.log(JSON.stringify(observations, null, 2));
        ewd.sendWebSocketMsg({
          type: 'patientData',
          observations: observations
        });
      }
    });
  });
};

var setPatientReading = function(patientId, record, ewd) {
  var options = getOptions();
  options.method = 'post';
  options.headers = {
    Authorization: 'thisisrob',
    'Content-type': 'application/json'
  };
  options.path = '/ec2/fhir/patient/@' + patientId + '/observation/create';
  var req = http.request(options, function(response) {
    console.log(response.statusCode);
    var data = '';
    response.on('data', function(chunk) {
      data += chunk;
    });
    response.on('end', function() {
      if (response.statusCode === 400) {
      }
      else {
        var observations = JSON.parse(data);
        console.log(JSON.stringify(observations, null, 2));
        ewd.sendWebSocketMsg({
          type: 'addPatientRecords',
          observations: observations
        });
      }
    });
  });

  req.write(JSON.stringify(record));
  req.end();
};

var createObservation = function(reading) {
  return { 
    "appliesDateTime": reading.date,
    "component": [{
      "valueCodeableConcept": {
        "coding": []
      },
      "valueQuantity": { 
        "value": reading.systolic,
        "units": "mm[Hg]"
      },
      "name": { 
        "coding": [{ 
          "system": "http://loinc.org", 
          "code": "8480-6"
        }]
      }
    },
    { 
      "valueCodeableConcept": { 
        "coding": [] 
      }, 
      "valueQuantity": { 
        "value": reading.diastolic, 
        "units": "mm[Hg]" 
      },
      "name": { 
        "coding": [{ 
          "system": "http://loinc.org", 
          "code": "8462-4" 
        }] 
      }
    }],
    "referenceRange": [], 
    "method": { 
      "coding": [] 
    }, 
    "bodySite": { 
      "coding": [] 
    }, 
    "interpretation": { 
      "coding": [] 
    },
    "valueCodeableConcept": { 
      "coding": [] 
    },
    "name": { 
      "coding": [{ 
        "system": "http://loinc.org", 
        "code": "" 
      }]
    } 
  };
};

module.exports = {
   
    onSocketMessage: function(ewd) {

        var wsMsg = ewd.webSocketMessage;
        var type = wsMsg.type;
        var params = wsMsg.params;
        var sessid = ewd.session.$('ewd_sessid')._value;

        if (type === 'EWD.form.login') {
          if (params.username === '') return 'You must enter a username';
          if (params.password === '') return 'You must enter a password';
          // change for actual validation logic...
          
          if (params.username !== 'rob') return 'Invalid login';
          if (params.password !== 'secret') return 'Invalid login';

          //if (params.password !== ewd.session.$('ewd_password')._value) return 'Invalid password';
          // ====================

          ewd.session.setAuthenticated();

          ewd.sendWebSocketMsg({
            type: 'loggedInAs',
            message: {
              fullName: params.username, // change for proper registered name
            }
          });
          ewd.session.$('patientId')._value = 148637;
          ewd.sendWebSocketMsg({
            type: 'readyToGo',
          });
          return ''; 
        }

        if (!ewd.session.isAuthenticated) return;

        if (type === 'getBPData') {
          var patientId = ewd.session.$('patientId')._value;
          getVistAData(patientId, ewd);
          getPatientData(patientId, ewd);
          return;
        }

        if (type === 'saveUser') {
            return this.saveUser(wsMsg.params, ewd);
        }

        if (type === 'newDataPoint') { // recieve new bp values 
          //var observation= createObservation(wsMsg.params);
          //setPatientReading(ewd.session.$('patientId')._value, observation, ewd)
        }


    }
};



